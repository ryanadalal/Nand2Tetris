// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    //CONTROL
    //111a cccc ccdd djjj
    //a 0=A 1=mem[A]
    //d areg dreg mem[a] storeALU
    //j out<0 out=0 out>0 Jump
    And(a=instruction[15], b=instruction[3], out=writeM);
    And(a=instruction[15], b=instruction[5], out=writeAwALU);
    Not(in=instruction[15], out=notinstruct15);
    Or(a=notinstruct15, b=writeAwALU, out=writeAReg);
    Or(a=aluneg, b=aluzero, out=notalupos);
    Not(in=notalupos, out=alupos);
    And(a=instruction[0], b=alupos, out=jmppos);
    And(a=instruction[1], b=aluzero, out=jmpzero);
    And(a=instruction[2], b=aluneg, out=jmpneg);
    Or(a=jmppos, b=jmpneg, out=jmpnotzero);
    Or(a=jmpnotzero, b=jmpzero, out=jmpcontrol);
    And(a=instruction[15], b=jmpcontrol, out=loadpc);
    Not(in=loadpc, out=incpc);

    And(a=instruction[4], b=instruction[15], out=writeDReg);
    //CPU
    Mux16(a[0..14]=instruction[0..14], b=outALU, sel=instruction[15], out=intoA);

    ARegister(in=intoA, load=writeAReg, out=areg, out[0..14]=addressM);
    DRegister(in=outALU, load=writeDReg, out=dreg);

    Mux16(a=areg, b=inM, sel=instruction[12], out=yaluin);

    ALU(x=dreg, y=yaluin, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f= instruction[7], no=instruction[6], out=outM,out=outALU, zr=aluzero, ng=aluneg);

    PC(in=areg, load=loadpc, inc=incpc, reset=reset, out[0..14]=pc);
}